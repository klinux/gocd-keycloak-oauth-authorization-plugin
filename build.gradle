/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"

gocdPlugin {
    id = 'cd.go.authorization.keycloak'
    pluginVersion = '2.0.0'
    goCdVersion = '19.2.0'
    name = 'Keycloak oauth authorization plugin'
    description = 'Keycloak oauth authorization plugin for GoCD'
    vendorName = 'klinux'
    vendorUrl = 'https://github.com/klinux/gocd-keycloak-oauth-authorization-plugin'

    githubRepo {
        owner = System.getenv('GITHUB_USER') ?: 'klinux'
        repo = 'gocd-keycloak-oauth-authorization-plugin'
        token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
    }

    pluginProject = project

    prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
    assetsToRelease = [project.tasks.jar]

    licenseReport {
        excludes = [
                'com.squareup.okio:okio'
        ]
    }
}

group = 'cd.go'
version = gocdPlugin.fullVersion(project)

repositories {
    jcenter()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext {
    deps = [
            gocdPluginApi: 'cd.go.plugin:go-plugin-api:23.3.0',
    ]

    versions = project.ext.deps.collectEntries { lib, libGav -> [lib, libGav.split(':').last()] }
}

dependencies {
    compileOnly project.deps.gocdPluginApi
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.11.0'

    testImplementation project.deps.gocdPluginApi
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.7.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.4.0'
    testImplementation group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.11.0'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(Jar) { jarTask ->
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    ['MD5', 'SHA1', 'SHA-256'].each { algo ->
        jarTask.outputs.files("${jarTask.archivePath}.${algo}")
        jarTask.doLast {
            ant.checksum file: jarTask.archivePath, format: 'MD5SUM', algorithm: algo
        }
    }

    manifest {
        attributes(
                'Go-Version': project.gocdPlugin.goCdVersion,
                'Plugin-Revision': project.gocdPlugin.pluginVersion,
                'Implementation-Title': project.gocdPlugin.name,
                'Implementation-Version': project.gocdPlugin.pluginVersion,
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

sourceSets {
    test {
        java {
            compileClasspath += configurations.compileOnly
            runtimeClasspath += configurations.compileOnly
        }
    }
}

jar {
    from(configurations.runtimeClasspath) {
        into "lib/"
    }
}